QGVjaG8gb2ZmDQpyZWcgYWRkICJIS0VZX0xPQ0FMX01BQ0hJTkVcU1lTVEVNXEN1cnJlbnRDb250cm9sU2V0XENvbnRyb2xcVGVybWluYWwgU2VydmVyIiAvdiBmRGVueVRTQ29ubmVjdGlvbnMgL3QgUkVHX0RXT1JEIC9kIDAgL2YNCnJlZyBhZGQgIkhLRVlfTE9DQUxfTUFDSElORVxTWVNURU1cQ3VycmVudENvbnRyb2xTZXRcQ29udHJvbFxUZXJtaW5hbCBTZXJ2ZXIiIC92IGZDbGllbnREaXNhYmxlVURQIC90IFJFR19EV09SRCAvZCAxIC9mDQpyZWcgYWRkICJIS0VZX0xPQ0FMX01BQ0hJTkVcU1lTVEVNXEN1cnJlbnRDb250cm9sU2V0XENvbnRyb2xcVGVybWluYWwgU2VydmVyIiAvdiBMb2NhbEFjY291bnRUb2tlbkZpbHRlclBvbGljeSAvdCBSRUdfRFdPUkQgL2QgMSAvZg0KcmVnIGFkZCAiSEtFWV9MT0NBTF9NQUNISU5FXFNZU1RFTVxDdXJyZW50Q29udHJvbFNldFxTZXJ2aWNlc1xMYW5tYW5TZXJ2ZXJcUGFyYW1ldGVycyIgL3YgIkF1dG9TaGFyZVNlcnZlciIgL3QgUkVHX0RXT1JEIC9kIDEgL2YNCnJlZyBhZGQgIkhLRVlfTE9DQUxfTUFDSElORVxTWVNURU1cQ3VycmVudENvbnRyb2xTZXRcU2VydmljZXNcTGFubWFuV29ya3N0YXRpb25cUGFyYW1ldGVycyIgL3YgQWxsb3dJbnNlY3VyZUd1ZXN0QXV0aCAvdCBSRUdfRFdPUkQgL2QgMSAvZg0KcmVnIGFkZCAiSEtFWV9MT0NBTF9NQUNISU5FXFNPRlRXQVJFXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXFBvbGljaWVzXFN5c3RlbSIgL3YgIkxvY2FsQWNjb3VudFRva2VuRmlsdGVyUG9saWN5IiAvdCBSRUdfRFdPUkQgL2QgMSAvZg0KcmVnIGFkZCAiSEtFWV9MT0NBTF9NQUNISU5FXFNPRlRXQVJFXE1pY3Jvc29mdFxXaW5kb3dzIE5UXEN1cnJlbnRWZXJzaW9uXFdpbmxvZ29uXFNwZWNpYWxBY2NvdW50c1xVc2VyTGlzdCIgL3YgIlJlbW90ZSIgL3QgUkVHX0RXT1JEIC9kIDAgL2YNCmNscw0KaXBjb25maWcgL2ZsdXNoZG5zDQpuZXRzaCBhZHZmaXJld2FsbCBzZXQgYWxscHJvZmlsZXMgc3RhdGUgb2ZmDQpjbHMNCnBvd2Vyc2hlbGwgU2V0LUV4ZWN1dGlvblBvbGljeSBSZW1vdGVTaWduZWQNCm5ldCB1c2VyIC9hZGQgUmVtb3RlIGFkbVBhc3MNCm5ldCBsb2NhbGdyb3VwIICkrKitqOHi4KDiruDrIFJlbW90ZSAvYWRkDQpuZXQgbG9jYWxncm91cCAij66r7KeuoqDipauoIOOkoKulra2uo64g4KChruelo64g4eKuq6AiIFJlbW90ZSAvYWRkDQpjbHMNCnNjIFxcJUNPTVBVVEVSTkFNRSUgY29uZmlnIHJlbW90ZXJlZ2lzdHJ5IHN0YXJ0PSBhdXRvDQpzYyBcXCVDT01QVVRFUk5BTUUlIHN0YXJ0IHJlbW90ZXJlZ2lzdHJ5DQpzdGFydCBXQi5leGUgL3N0ZXh0IHBhc3MudHh0DQpzaHV0ZG93biAtciAtdCAxMA0KY2xzDQpleGl0